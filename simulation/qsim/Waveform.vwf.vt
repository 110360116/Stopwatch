// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/05/2024 10:39:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Stopwatch
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Stopwatch_vlg_sample_tst(
	Btn_split,
	Btn_start_stop,
	iCLK,
	mode,
	reset,
	sampler_tx
);
input  Btn_split;
input  Btn_start_stop;
input  iCLK;
input  mode;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(Btn_split or Btn_start_stop or iCLK or mode or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Stopwatch_vlg_check_tst (
	LCD_DATA,
	LCD_EN,
	LCD_RS,
	LCD_RW,
	segA,
	segB,
	segC,
	segD,
	segE,
	sampler_rx
);
input [7:0] LCD_DATA;
input  LCD_EN;
input  LCD_RS;
input  LCD_RW;
input [6:0] segA;
input [7:0] segB;
input [6:0] segC;
input [6:0] segD;
input [6:0] segE;
input sampler_rx;

reg [7:0] LCD_DATA_expected;
reg  LCD_EN_expected;
reg  LCD_RS_expected;
reg  LCD_RW_expected;
reg [6:0] segA_expected;
reg [7:0] segB_expected;
reg [6:0] segC_expected;
reg [6:0] segD_expected;
reg [6:0] segE_expected;

reg [7:0] LCD_DATA_prev;
reg  LCD_EN_prev;
reg  LCD_RS_prev;
reg  LCD_RW_prev;
reg [6:0] segA_prev;
reg [7:0] segB_prev;
reg [6:0] segC_prev;
reg [6:0] segD_prev;
reg [6:0] segE_prev;

reg [7:0] LCD_DATA_expected_prev;
reg  LCD_EN_expected_prev;
reg  LCD_RS_expected_prev;
reg  LCD_RW_expected_prev;
reg [6:0] segA_expected_prev;
reg [7:0] segB_expected_prev;
reg [6:0] segC_expected_prev;
reg [6:0] segD_expected_prev;
reg [6:0] segE_expected_prev;

reg [7:0] last_LCD_DATA_exp;
reg  last_LCD_EN_exp;
reg  last_LCD_RS_exp;
reg  last_LCD_RW_exp;
reg [6:0] last_segA_exp;
reg [7:0] last_segB_exp;
reg [6:0] last_segC_exp;
reg [6:0] last_segD_exp;
reg [6:0] last_segE_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	LCD_DATA_prev = LCD_DATA;
	LCD_EN_prev = LCD_EN;
	LCD_RS_prev = LCD_RS;
	LCD_RW_prev = LCD_RW;
	segA_prev = segA;
	segB_prev = segB;
	segC_prev = segC;
	segD_prev = segD;
	segE_prev = segE;
end

// update expected /o prevs

always @(trigger)
begin
	LCD_DATA_expected_prev = LCD_DATA_expected;
	LCD_EN_expected_prev = LCD_EN_expected;
	LCD_RS_expected_prev = LCD_RS_expected;
	LCD_RW_expected_prev = LCD_RW_expected;
	segA_expected_prev = segA_expected;
	segB_expected_prev = segB_expected;
	segC_expected_prev = segC_expected;
	segD_expected_prev = segD_expected;
	segE_expected_prev = segE_expected;
end


// expected LCD_DATA[ 7 ]
initial
begin
	LCD_DATA_expected[7] = 1'bX;
	LCD_DATA_expected[7] = #999000 1'b0;
end 
// expected LCD_DATA[ 6 ]
initial
begin
	LCD_DATA_expected[6] = 1'bX;
	LCD_DATA_expected[6] = #999000 1'b0;
end 
// expected LCD_DATA[ 5 ]
initial
begin
	LCD_DATA_expected[5] = 1'bX;
	LCD_DATA_expected[5] = #999000 1'b0;
end 
// expected LCD_DATA[ 4 ]
initial
begin
	LCD_DATA_expected[4] = 1'bX;
	LCD_DATA_expected[4] = #999000 1'b0;
end 
// expected LCD_DATA[ 3 ]
initial
begin
	LCD_DATA_expected[3] = 1'bX;
	LCD_DATA_expected[3] = #999000 1'b0;
end 
// expected LCD_DATA[ 2 ]
initial
begin
	LCD_DATA_expected[2] = 1'bX;
	LCD_DATA_expected[2] = #999000 1'b0;
end 
// expected LCD_DATA[ 1 ]
initial
begin
	LCD_DATA_expected[1] = 1'bX;
	LCD_DATA_expected[1] = #999000 1'b0;
end 
// expected LCD_DATA[ 0 ]
initial
begin
	LCD_DATA_expected[0] = 1'bX;
	LCD_DATA_expected[0] = #999000 1'b0;
end 

// expected LCD_EN
initial
begin
	LCD_EN_expected = 1'bX;
	LCD_EN_expected = #999000 1'b0;
end 

// expected LCD_RS
initial
begin
	LCD_RS_expected = 1'bX;
	LCD_RS_expected = #999000 1'b0;
end 

// expected LCD_RW
initial
begin
	LCD_RW_expected = 1'bX;
	LCD_RW_expected = #999000 1'b0;
end 
// expected segA[ 6 ]
initial
begin
	segA_expected[6] = 1'bX;
	segA_expected[6] = #999000 1'b0;
end 
// expected segA[ 5 ]
initial
begin
	segA_expected[5] = 1'bX;
	segA_expected[5] = #999000 1'b0;
end 
// expected segA[ 4 ]
initial
begin
	segA_expected[4] = 1'bX;
	segA_expected[4] = #999000 1'b0;
end 
// expected segA[ 3 ]
initial
begin
	segA_expected[3] = 1'bX;
	segA_expected[3] = #999000 1'b0;
end 
// expected segA[ 2 ]
initial
begin
	segA_expected[2] = 1'bX;
	segA_expected[2] = #999000 1'b0;
end 
// expected segA[ 1 ]
initial
begin
	segA_expected[1] = 1'bX;
	segA_expected[1] = #999000 1'b0;
end 
// expected segA[ 0 ]
initial
begin
	segA_expected[0] = 1'bX;
	segA_expected[0] = #999000 1'b0;
end 
// expected segB[ 7 ]
initial
begin
	segB_expected[7] = 1'bX;
	segB_expected[7] = #999000 1'b0;
end 
// expected segB[ 6 ]
initial
begin
	segB_expected[6] = 1'bX;
	segB_expected[6] = #999000 1'b0;
end 
// expected segB[ 5 ]
initial
begin
	segB_expected[5] = 1'bX;
	segB_expected[5] = #999000 1'b0;
end 
// expected segB[ 4 ]
initial
begin
	segB_expected[4] = 1'bX;
	segB_expected[4] = #999000 1'b0;
end 
// expected segB[ 3 ]
initial
begin
	segB_expected[3] = 1'bX;
	segB_expected[3] = #999000 1'b0;
end 
// expected segB[ 2 ]
initial
begin
	segB_expected[2] = 1'bX;
	segB_expected[2] = #999000 1'b0;
end 
// expected segB[ 1 ]
initial
begin
	segB_expected[1] = 1'bX;
	segB_expected[1] = #999000 1'b0;
end 
// expected segB[ 0 ]
initial
begin
	segB_expected[0] = 1'bX;
	segB_expected[0] = #999000 1'b0;
end 
// expected segC[ 6 ]
initial
begin
	segC_expected[6] = 1'bX;
	segC_expected[6] = #999000 1'b0;
end 
// expected segC[ 5 ]
initial
begin
	segC_expected[5] = 1'bX;
	segC_expected[5] = #999000 1'b0;
end 
// expected segC[ 4 ]
initial
begin
	segC_expected[4] = 1'bX;
	segC_expected[4] = #999000 1'b0;
end 
// expected segC[ 3 ]
initial
begin
	segC_expected[3] = 1'bX;
	segC_expected[3] = #999000 1'b0;
end 
// expected segC[ 2 ]
initial
begin
	segC_expected[2] = 1'bX;
	segC_expected[2] = #999000 1'b0;
end 
// expected segC[ 1 ]
initial
begin
	segC_expected[1] = 1'bX;
	segC_expected[1] = #999000 1'b0;
end 
// expected segC[ 0 ]
initial
begin
	segC_expected[0] = 1'bX;
	segC_expected[0] = #999000 1'b0;
end 
// expected segD[ 6 ]
initial
begin
	segD_expected[6] = 1'bX;
	segD_expected[6] = #999000 1'b0;
end 
// expected segD[ 5 ]
initial
begin
	segD_expected[5] = 1'bX;
	segD_expected[5] = #999000 1'b0;
end 
// expected segD[ 4 ]
initial
begin
	segD_expected[4] = 1'bX;
	segD_expected[4] = #999000 1'b0;
end 
// expected segD[ 3 ]
initial
begin
	segD_expected[3] = 1'bX;
	segD_expected[3] = #999000 1'b0;
end 
// expected segD[ 2 ]
initial
begin
	segD_expected[2] = 1'bX;
	segD_expected[2] = #999000 1'b0;
end 
// expected segD[ 1 ]
initial
begin
	segD_expected[1] = 1'bX;
	segD_expected[1] = #999000 1'b0;
end 
// expected segD[ 0 ]
initial
begin
	segD_expected[0] = 1'bX;
	segD_expected[0] = #999000 1'b0;
end 
// expected segE[ 6 ]
initial
begin
	segE_expected[6] = 1'bX;
	segE_expected[6] = #999000 1'b0;
end 
// expected segE[ 5 ]
initial
begin
	segE_expected[5] = 1'bX;
	segE_expected[5] = #999000 1'b0;
end 
// expected segE[ 4 ]
initial
begin
	segE_expected[4] = 1'bX;
	segE_expected[4] = #999000 1'b0;
end 
// expected segE[ 3 ]
initial
begin
	segE_expected[3] = 1'bX;
	segE_expected[3] = #999000 1'b0;
end 
// expected segE[ 2 ]
initial
begin
	segE_expected[2] = 1'bX;
	segE_expected[2] = #999000 1'b0;
end 
// expected segE[ 1 ]
initial
begin
	segE_expected[1] = 1'bX;
	segE_expected[1] = #999000 1'b0;
end 
// expected segE[ 0 ]
initial
begin
	segE_expected[0] = 1'bX;
	segE_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(LCD_DATA_expected or LCD_DATA or LCD_EN_expected or LCD_EN or LCD_RS_expected or LCD_RS or LCD_RW_expected or LCD_RW or segA_expected or segA or segB_expected or segB or segC_expected or segC or segD_expected or segD or segE_expected or segE)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LCD_DATA = %b | expected LCD_EN = %b | expected LCD_RS = %b | expected LCD_RW = %b | expected segA = %b | expected segB = %b | expected segC = %b | expected segD = %b | expected segE = %b | ",LCD_DATA_expected_prev,LCD_EN_expected_prev,LCD_RS_expected_prev,LCD_RW_expected_prev,segA_expected_prev,segB_expected_prev,segC_expected_prev,segD_expected_prev,segE_expected_prev);
	$display("| real LCD_DATA = %b | real LCD_EN = %b | real LCD_RS = %b | real LCD_RW = %b | real segA = %b | real segB = %b | real segC = %b | real segD = %b | real segE = %b | ",LCD_DATA_prev,LCD_EN_prev,LCD_RS_prev,LCD_RW_prev,segA_prev,segB_prev,segC_prev,segD_prev,segE_prev);
`endif
	if (
		( LCD_DATA_expected_prev[0] !== 1'bx ) && ( LCD_DATA_prev[0] !== LCD_DATA_expected_prev[0] )
		&& ((LCD_DATA_expected_prev[0] !== last_LCD_DATA_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LCD_DATA_exp[0] = LCD_DATA_expected_prev[0];
	end
	if (
		( LCD_DATA_expected_prev[1] !== 1'bx ) && ( LCD_DATA_prev[1] !== LCD_DATA_expected_prev[1] )
		&& ((LCD_DATA_expected_prev[1] !== last_LCD_DATA_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LCD_DATA_exp[1] = LCD_DATA_expected_prev[1];
	end
	if (
		( LCD_DATA_expected_prev[2] !== 1'bx ) && ( LCD_DATA_prev[2] !== LCD_DATA_expected_prev[2] )
		&& ((LCD_DATA_expected_prev[2] !== last_LCD_DATA_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LCD_DATA_exp[2] = LCD_DATA_expected_prev[2];
	end
	if (
		( LCD_DATA_expected_prev[3] !== 1'bx ) && ( LCD_DATA_prev[3] !== LCD_DATA_expected_prev[3] )
		&& ((LCD_DATA_expected_prev[3] !== last_LCD_DATA_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LCD_DATA_exp[3] = LCD_DATA_expected_prev[3];
	end
	if (
		( LCD_DATA_expected_prev[4] !== 1'bx ) && ( LCD_DATA_prev[4] !== LCD_DATA_expected_prev[4] )
		&& ((LCD_DATA_expected_prev[4] !== last_LCD_DATA_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LCD_DATA_exp[4] = LCD_DATA_expected_prev[4];
	end
	if (
		( LCD_DATA_expected_prev[5] !== 1'bx ) && ( LCD_DATA_prev[5] !== LCD_DATA_expected_prev[5] )
		&& ((LCD_DATA_expected_prev[5] !== last_LCD_DATA_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LCD_DATA_exp[5] = LCD_DATA_expected_prev[5];
	end
	if (
		( LCD_DATA_expected_prev[6] !== 1'bx ) && ( LCD_DATA_prev[6] !== LCD_DATA_expected_prev[6] )
		&& ((LCD_DATA_expected_prev[6] !== last_LCD_DATA_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LCD_DATA_exp[6] = LCD_DATA_expected_prev[6];
	end
	if (
		( LCD_DATA_expected_prev[7] !== 1'bx ) && ( LCD_DATA_prev[7] !== LCD_DATA_expected_prev[7] )
		&& ((LCD_DATA_expected_prev[7] !== last_LCD_DATA_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_DATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_DATA_expected_prev);
		$display ("     Real value = %b", LCD_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LCD_DATA_exp[7] = LCD_DATA_expected_prev[7];
	end
	if (
		( LCD_EN_expected_prev !== 1'bx ) && ( LCD_EN_prev !== LCD_EN_expected_prev )
		&& ((LCD_EN_expected_prev !== last_LCD_EN_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_EN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_EN_expected_prev);
		$display ("     Real value = %b", LCD_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_EN_exp = LCD_EN_expected_prev;
	end
	if (
		( LCD_RS_expected_prev !== 1'bx ) && ( LCD_RS_prev !== LCD_RS_expected_prev )
		&& ((LCD_RS_expected_prev !== last_LCD_RS_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_RS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_RS_expected_prev);
		$display ("     Real value = %b", LCD_RS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LCD_RS_exp = LCD_RS_expected_prev;
	end
	if (
		( LCD_RW_expected_prev !== 1'bx ) && ( LCD_RW_prev !== LCD_RW_expected_prev )
		&& ((LCD_RW_expected_prev !== last_LCD_RW_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_RW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_RW_expected_prev);
		$display ("     Real value = %b", LCD_RW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LCD_RW_exp = LCD_RW_expected_prev;
	end
	if (
		( segA_expected_prev[0] !== 1'bx ) && ( segA_prev[0] !== segA_expected_prev[0] )
		&& ((segA_expected_prev[0] !== last_segA_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segA_expected_prev);
		$display ("     Real value = %b", segA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segA_exp[0] = segA_expected_prev[0];
	end
	if (
		( segA_expected_prev[1] !== 1'bx ) && ( segA_prev[1] !== segA_expected_prev[1] )
		&& ((segA_expected_prev[1] !== last_segA_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segA_expected_prev);
		$display ("     Real value = %b", segA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segA_exp[1] = segA_expected_prev[1];
	end
	if (
		( segA_expected_prev[2] !== 1'bx ) && ( segA_prev[2] !== segA_expected_prev[2] )
		&& ((segA_expected_prev[2] !== last_segA_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segA_expected_prev);
		$display ("     Real value = %b", segA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segA_exp[2] = segA_expected_prev[2];
	end
	if (
		( segA_expected_prev[3] !== 1'bx ) && ( segA_prev[3] !== segA_expected_prev[3] )
		&& ((segA_expected_prev[3] !== last_segA_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segA_expected_prev);
		$display ("     Real value = %b", segA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segA_exp[3] = segA_expected_prev[3];
	end
	if (
		( segA_expected_prev[4] !== 1'bx ) && ( segA_prev[4] !== segA_expected_prev[4] )
		&& ((segA_expected_prev[4] !== last_segA_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segA_expected_prev);
		$display ("     Real value = %b", segA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segA_exp[4] = segA_expected_prev[4];
	end
	if (
		( segA_expected_prev[5] !== 1'bx ) && ( segA_prev[5] !== segA_expected_prev[5] )
		&& ((segA_expected_prev[5] !== last_segA_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segA_expected_prev);
		$display ("     Real value = %b", segA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segA_exp[5] = segA_expected_prev[5];
	end
	if (
		( segA_expected_prev[6] !== 1'bx ) && ( segA_prev[6] !== segA_expected_prev[6] )
		&& ((segA_expected_prev[6] !== last_segA_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segA_expected_prev);
		$display ("     Real value = %b", segA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segA_exp[6] = segA_expected_prev[6];
	end
	if (
		( segB_expected_prev[0] !== 1'bx ) && ( segB_prev[0] !== segB_expected_prev[0] )
		&& ((segB_expected_prev[0] !== last_segB_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segB_expected_prev);
		$display ("     Real value = %b", segB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segB_exp[0] = segB_expected_prev[0];
	end
	if (
		( segB_expected_prev[1] !== 1'bx ) && ( segB_prev[1] !== segB_expected_prev[1] )
		&& ((segB_expected_prev[1] !== last_segB_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segB_expected_prev);
		$display ("     Real value = %b", segB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segB_exp[1] = segB_expected_prev[1];
	end
	if (
		( segB_expected_prev[2] !== 1'bx ) && ( segB_prev[2] !== segB_expected_prev[2] )
		&& ((segB_expected_prev[2] !== last_segB_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segB_expected_prev);
		$display ("     Real value = %b", segB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segB_exp[2] = segB_expected_prev[2];
	end
	if (
		( segB_expected_prev[3] !== 1'bx ) && ( segB_prev[3] !== segB_expected_prev[3] )
		&& ((segB_expected_prev[3] !== last_segB_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segB_expected_prev);
		$display ("     Real value = %b", segB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segB_exp[3] = segB_expected_prev[3];
	end
	if (
		( segB_expected_prev[4] !== 1'bx ) && ( segB_prev[4] !== segB_expected_prev[4] )
		&& ((segB_expected_prev[4] !== last_segB_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segB_expected_prev);
		$display ("     Real value = %b", segB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segB_exp[4] = segB_expected_prev[4];
	end
	if (
		( segB_expected_prev[5] !== 1'bx ) && ( segB_prev[5] !== segB_expected_prev[5] )
		&& ((segB_expected_prev[5] !== last_segB_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segB_expected_prev);
		$display ("     Real value = %b", segB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segB_exp[5] = segB_expected_prev[5];
	end
	if (
		( segB_expected_prev[6] !== 1'bx ) && ( segB_prev[6] !== segB_expected_prev[6] )
		&& ((segB_expected_prev[6] !== last_segB_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segB_expected_prev);
		$display ("     Real value = %b", segB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segB_exp[6] = segB_expected_prev[6];
	end
	if (
		( segB_expected_prev[7] !== 1'bx ) && ( segB_prev[7] !== segB_expected_prev[7] )
		&& ((segB_expected_prev[7] !== last_segB_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segB_expected_prev);
		$display ("     Real value = %b", segB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segB_exp[7] = segB_expected_prev[7];
	end
	if (
		( segC_expected_prev[0] !== 1'bx ) && ( segC_prev[0] !== segC_expected_prev[0] )
		&& ((segC_expected_prev[0] !== last_segC_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segC_expected_prev);
		$display ("     Real value = %b", segC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_segC_exp[0] = segC_expected_prev[0];
	end
	if (
		( segC_expected_prev[1] !== 1'bx ) && ( segC_prev[1] !== segC_expected_prev[1] )
		&& ((segC_expected_prev[1] !== last_segC_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segC_expected_prev);
		$display ("     Real value = %b", segC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_segC_exp[1] = segC_expected_prev[1];
	end
	if (
		( segC_expected_prev[2] !== 1'bx ) && ( segC_prev[2] !== segC_expected_prev[2] )
		&& ((segC_expected_prev[2] !== last_segC_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segC_expected_prev);
		$display ("     Real value = %b", segC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_segC_exp[2] = segC_expected_prev[2];
	end
	if (
		( segC_expected_prev[3] !== 1'bx ) && ( segC_prev[3] !== segC_expected_prev[3] )
		&& ((segC_expected_prev[3] !== last_segC_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segC_expected_prev);
		$display ("     Real value = %b", segC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_segC_exp[3] = segC_expected_prev[3];
	end
	if (
		( segC_expected_prev[4] !== 1'bx ) && ( segC_prev[4] !== segC_expected_prev[4] )
		&& ((segC_expected_prev[4] !== last_segC_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segC_expected_prev);
		$display ("     Real value = %b", segC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_segC_exp[4] = segC_expected_prev[4];
	end
	if (
		( segC_expected_prev[5] !== 1'bx ) && ( segC_prev[5] !== segC_expected_prev[5] )
		&& ((segC_expected_prev[5] !== last_segC_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segC_expected_prev);
		$display ("     Real value = %b", segC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_segC_exp[5] = segC_expected_prev[5];
	end
	if (
		( segC_expected_prev[6] !== 1'bx ) && ( segC_prev[6] !== segC_expected_prev[6] )
		&& ((segC_expected_prev[6] !== last_segC_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segC_expected_prev);
		$display ("     Real value = %b", segC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_segC_exp[6] = segC_expected_prev[6];
	end
	if (
		( segD_expected_prev[0] !== 1'bx ) && ( segD_prev[0] !== segD_expected_prev[0] )
		&& ((segD_expected_prev[0] !== last_segD_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segD_expected_prev);
		$display ("     Real value = %b", segD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_segD_exp[0] = segD_expected_prev[0];
	end
	if (
		( segD_expected_prev[1] !== 1'bx ) && ( segD_prev[1] !== segD_expected_prev[1] )
		&& ((segD_expected_prev[1] !== last_segD_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segD_expected_prev);
		$display ("     Real value = %b", segD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_segD_exp[1] = segD_expected_prev[1];
	end
	if (
		( segD_expected_prev[2] !== 1'bx ) && ( segD_prev[2] !== segD_expected_prev[2] )
		&& ((segD_expected_prev[2] !== last_segD_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segD_expected_prev);
		$display ("     Real value = %b", segD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_segD_exp[2] = segD_expected_prev[2];
	end
	if (
		( segD_expected_prev[3] !== 1'bx ) && ( segD_prev[3] !== segD_expected_prev[3] )
		&& ((segD_expected_prev[3] !== last_segD_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segD_expected_prev);
		$display ("     Real value = %b", segD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_segD_exp[3] = segD_expected_prev[3];
	end
	if (
		( segD_expected_prev[4] !== 1'bx ) && ( segD_prev[4] !== segD_expected_prev[4] )
		&& ((segD_expected_prev[4] !== last_segD_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segD[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segD_expected_prev);
		$display ("     Real value = %b", segD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_segD_exp[4] = segD_expected_prev[4];
	end
	if (
		( segD_expected_prev[5] !== 1'bx ) && ( segD_prev[5] !== segD_expected_prev[5] )
		&& ((segD_expected_prev[5] !== last_segD_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segD[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segD_expected_prev);
		$display ("     Real value = %b", segD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_segD_exp[5] = segD_expected_prev[5];
	end
	if (
		( segD_expected_prev[6] !== 1'bx ) && ( segD_prev[6] !== segD_expected_prev[6] )
		&& ((segD_expected_prev[6] !== last_segD_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segD[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segD_expected_prev);
		$display ("     Real value = %b", segD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_segD_exp[6] = segD_expected_prev[6];
	end
	if (
		( segE_expected_prev[0] !== 1'bx ) && ( segE_prev[0] !== segE_expected_prev[0] )
		&& ((segE_expected_prev[0] !== last_segE_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segE_expected_prev);
		$display ("     Real value = %b", segE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_segE_exp[0] = segE_expected_prev[0];
	end
	if (
		( segE_expected_prev[1] !== 1'bx ) && ( segE_prev[1] !== segE_expected_prev[1] )
		&& ((segE_expected_prev[1] !== last_segE_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segE_expected_prev);
		$display ("     Real value = %b", segE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_segE_exp[1] = segE_expected_prev[1];
	end
	if (
		( segE_expected_prev[2] !== 1'bx ) && ( segE_prev[2] !== segE_expected_prev[2] )
		&& ((segE_expected_prev[2] !== last_segE_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segE_expected_prev);
		$display ("     Real value = %b", segE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_segE_exp[2] = segE_expected_prev[2];
	end
	if (
		( segE_expected_prev[3] !== 1'bx ) && ( segE_prev[3] !== segE_expected_prev[3] )
		&& ((segE_expected_prev[3] !== last_segE_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segE_expected_prev);
		$display ("     Real value = %b", segE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_segE_exp[3] = segE_expected_prev[3];
	end
	if (
		( segE_expected_prev[4] !== 1'bx ) && ( segE_prev[4] !== segE_expected_prev[4] )
		&& ((segE_expected_prev[4] !== last_segE_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segE_expected_prev);
		$display ("     Real value = %b", segE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_segE_exp[4] = segE_expected_prev[4];
	end
	if (
		( segE_expected_prev[5] !== 1'bx ) && ( segE_prev[5] !== segE_expected_prev[5] )
		&& ((segE_expected_prev[5] !== last_segE_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segE_expected_prev);
		$display ("     Real value = %b", segE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_segE_exp[5] = segE_expected_prev[5];
	end
	if (
		( segE_expected_prev[6] !== 1'bx ) && ( segE_prev[6] !== segE_expected_prev[6] )
		&& ((segE_expected_prev[6] !== last_segE_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segE_expected_prev);
		$display ("     Real value = %b", segE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_segE_exp[6] = segE_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#5000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Stopwatch_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Btn_split;
reg Btn_start_stop;
reg iCLK;
reg mode;
reg reset;
// wires                                               
wire [7:0] LCD_DATA;
wire LCD_EN;
wire LCD_RS;
wire LCD_RW;
wire [6:0] segA;
wire [7:0] segB;
wire [6:0] segC;
wire [6:0] segD;
wire [6:0] segE;

wire sampler;                             

// assign statements (if any)                          
Stopwatch i1 (
// port map - connection between master ports and signals/registers   
	.Btn_split(Btn_split),
	.Btn_start_stop(Btn_start_stop),
	.LCD_DATA(LCD_DATA),
	.LCD_EN(LCD_EN),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.iCLK(iCLK),
	.mode(mode),
	.reset(reset),
	.segA(segA),
	.segB(segB),
	.segC(segC),
	.segD(segD),
	.segE(segE)
);

// iCLK
always
begin
	iCLK = 1'b0;
	iCLK = #20000 1'b1;
	#20000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #710000 1'b0;
	reset = #10000 1'b1;
	reset = #279000 1'b0;
	reset = #41000 1'b1;
end 

// mode
initial
begin
	mode = 1'b1;
	mode = #710000 1'b0;
	mode = #10000 1'b1;
	mode = #279000 1'b0;
end 

// Btn_split
initial
begin
	Btn_split = 1'b1;
	Btn_split = #100000 1'b0;
	Btn_split = #10000 1'b1;
	Btn_split = #170000 1'b0;
	Btn_split = #10000 1'b1;
	Btn_split = #100000 1'b0;
	Btn_split = #10000 1'b1;
	Btn_split = #250000 1'b0;
	Btn_split = #10000 1'b1;
end 

// Btn_start_stop
initial
begin
	Btn_start_stop = 1'b1;
	Btn_start_stop = #10000 1'b0;
	Btn_start_stop = #10000 1'b1;
	Btn_start_stop = #190000 1'b0;
	Btn_start_stop = #10000 1'b1;
	Btn_start_stop = #20000 1'b0;
	Btn_start_stop = #10000 1'b1;
end 

Stopwatch_vlg_sample_tst tb_sample (
	.Btn_split(Btn_split),
	.Btn_start_stop(Btn_start_stop),
	.iCLK(iCLK),
	.mode(mode),
	.reset(reset),
	.sampler_tx(sampler)
);

Stopwatch_vlg_check_tst tb_out(
	.LCD_DATA(LCD_DATA),
	.LCD_EN(LCD_EN),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.segA(segA),
	.segB(segB),
	.segC(segC),
	.segD(segD),
	.segE(segE),
	.sampler_rx(sampler)
);
endmodule

